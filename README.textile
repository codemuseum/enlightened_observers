h1. EnlightenedObservers

This plugin makes it quick and easy to share the controller information with observers, including session information.  This is useful when observers need to report the current_user that made a certain action happen.

A sizable amount of the code and idea for this plugin comes from:
"Garry Dolley's Let ActiveRecord Observers see controller context":http://scie.nti.st/2007/2/1/let-activerecord-observers-see-controller-context


h2. Usage

<pre>
class MyController < ActionController::Base
  enlighten_observer :my_observer<i>[, :my_second_observer]</i>
end
</pre>

In your observers, also <code>include EnlightenedObservers::Enlightenment</code>:

<pre>
class MyObserver < ActiveRecord::Observer
  include EnlightenedObservers::Enlightenment
  
<i>  def after_create(my)
    ...
  end</i>
end
</pre>

Of course, you still have to initialize any observer the normal way in <code>config/environment.rb</code>

<pre>
  config.active_record.observers = :my_observer<i>[, :my_second_observer]</i>
</pre>


h2. Installation 

To enable the library your Rails 2.1 (or greater) project, use the gem configuration method in "<code>config/environment.rb</code>"

<pre>
Rails::Initializer.run do |config|
  config.gem 'moorage-enlightened_observers', :lib => 'enlightened_observers', :source => 'http://gems.github.com'
end
</pre>

The <code>:lib</code> is important, because rails gets confused when the name of the gem is different from the library.

And of course, run 

<pre>
  rake gems:install
</pre>

To get them installed on your system.

Optionally, to unpack it into your application, just run:

<pre>
  rake gems:unpack GEM=moorage-enlightened_observers
</pre>


h2. How it Works

By adding <code>include EnlightenedObservers::Enlightenment</code> to your Observer, an <code>attr_accessor</code> for <code>controllers</code> is added, which you can access any time from your Observer.  Depending on how your oberserver has been called, this variable might have been set, with the controller that was used to access and change the model this observer has been observing.

By calling <code>enlighten_observer :my_observer<i>[, :my_second_observer]</i></code> in your controllers, you're adding an around_filter to the controller that sets and unsets the observers' controller accessor.  Each time a controller action is called, this around filter finds the currently running instance of the observer (using code copied from module <code>ActiveModel::Observing::ClassMethods</code>).

NOTE: we could have had the <code>enlighten_observer</code> call actually do the <code>include EnlightenedObservers::Enlightenment</code> in the Observer - however, since your observer can be run even if the model was changed through something OTHER than a controller action, we chose to decouple the two calls.


=======
Copyright (c) 2008 ThriveSmart, LLC, based on code by Garry Dolley, released under the MIT license.
